var documenterSearchIndex = {"docs":
[{"location":"layoutables/#LSlider-1","page":"Other Layoutables","title":"LSlider","text":"","category":"section"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"A simple slider without a label. You can create a label using an LText object, for example. You need to specify a range that constrains the slider's possible values. You can then lift the value observable to make interactive plots.","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\nsl1 = layout[2, 1] = LSlider(scene, range = 0:0.01:10, startvalue = 3)\nsl2 = layout[3, 1] = LSlider(scene, range = 0:0.01:10, startvalue = 5)\nsl3 = layout[4, 1] = LSlider(scene, range = 0:0.01:10, startvalue = 7)\n\nsl4 = layout[:, 2] = LSlider(scene, range = 0:0.01:10, horizontal = false,\n    width = Auto(true), height = nothing)\n\nsave(\"example_lslider.png\", scene); nothing # hide","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"(Image: example lslider)","category":"page"},{"location":"layoutables/#LText-1","page":"Other Layoutables","title":"LText","text":"","category":"section"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"This is just normal text, except it's also layoutable. A text's size is known, so rows and columns in a GridLayout can shrink to the appropriate width or height.","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\naxs = layout[1:2, 1:3] = [LAxis(scene) for _ in 1:6]\n\nsupertitle = layout[0, :] = LText(scene, \"Six plots\", textsize = 30)\n\nsideinfo = layout[2:3, 0] = LText(scene, \"This text goes vertically\", rotation = pi/2)\n\nsave(\"example_ltext.png\", scene); nothing # hide","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"(Image: example ltext)","category":"page"},{"location":"layoutables/#LButton-1","page":"Other Layoutables","title":"LButton","text":"","category":"section"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nlayout[1, 1] = LAxis(scene)\nlayout[2, 1] = buttongrid = GridLayout(width = Auto(false))\n\nbuttongrid[1, 1:5] = [LButton(scene, label = \"Button $i\") for i in 1:5]\n\nscene\n\nsave(\"example_lbutton.png\", scene); nothing # hide","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"(Image: example lbutton)","category":"page"},{"location":"layoutables/#LRect-1","page":"Other Layoutables","title":"LRect","text":"","category":"section"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"A simple rectangle poly that is layoutable. This can be useful to make boxes for facet plots or when a rectangular placeholder is needed.","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"using Makie\nusing MakieLayout\nusing ColorSchemes\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nrects = layout[1:4, 1:6] = [LRect(scene, color = c) for c in get.(Ref(ColorSchemes.rainbow), (0:23) ./ 23)]\n\nsave(\"example_lrect.png\", scene); nothing # hide","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"(Image: example lrect)","category":"page"},{"location":"layoutables/#LScene-1","page":"Other Layoutables","title":"LScene","text":"","category":"section"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"If you need a normal Makie scene in a layout, for example for 3D plots, you have to use LScene right now. It's just a wrapper around the normal Scene that makes it layoutable. The underlying Scene is accessible via the scene field. You can plot into the LScene directly, though.","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"Currently you should pass a couple of attributes explicitly to make sure they are not inherited from the main scene (which has a pixel camera, e.g.).","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nlscenes = layout[1:2, 1:3] = [LScene(scene, camera = cam3d!, raw = false) for _ in 1:6]\n\n[scatter!(lscenes[i], rand(100, 3), color = c)\n    for (i, c) in enumerate([:red, :blue, :green, :orange, :black, :gray])]\n\nsave(\"example_lscene.png\", scene); nothing # hide","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"(Image: example lscene)","category":"page"},{"location":"layoutables/#LToggle-1","page":"Other Layoutables","title":"LToggle","text":"","category":"section"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"A toggle with an attribute active that can either be true or false, to enable or disable properties of an interactive plot.","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\ntoggles = [LToggle(scene, active = ac) for ac in [true, false]]\nlabels = [LText(scene, lift(x -> x ? \"active\" : \"inactive\", t.active))\n    for t in toggles]\n\nlayout[1, 2] = grid!(hcat(toggles, labels), height = Auto(false))\n\nsave(\"example_ltoggle.png\", scene); nothing # hide","category":"page"},{"location":"layoutables/#","page":"Other Layoutables","title":"Other Layoutables","text":"(Image: example ltoggle)","category":"page"},{"location":"layouting/#How-layouting-works-1","page":"How layouting works","title":"How layouting works","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"The goal of MakieLayout is that all elements placed in a scene fit into the window, fill the available space, and are nicely aligned relative to each other. This works by using GridLayout objects that determine how wide their rows and columns should be given their content elements.","category":"page"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"Content elements have inner widths and heights, as well as four protrusions, that tell how far supporting content (like axis decorations) sticks out from the main part. The protrusions are meant to stick into the gaps between grid cells, and not every element has meaningful protrusions. They are mostly meant to allow for alignment of axes along their spines.","category":"page"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"Each element in a layout should have a couple of nodes that support the layout computations.","category":"page"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"Suggested bounding box\nComputed bounding box\nAuto-determined width and height\nComputed width and height\nProtrusions\nSize attributes\nAlignment attributes","category":"page"},{"location":"layouting/#Suggested-bounding-box-1","page":"How layouting works","title":"Suggested bounding box","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"This is the bounding box that is suggested to the element. Depending on the settings of the element, it can choose to align perfectly with this bounding box or, if its actual dimensions differ, how it should align inside that rectangle. A small LText can for example be aligned top-left inside a big available suggested bounding box.","category":"page"},{"location":"layouting/#Computed-bounding-box-1","page":"How layouting works","title":"Computed bounding box","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"This is the bounding box of the element after it has received a suggested bounding box and applied its own layout logic. This is the bounding box in which the elements main area will be in the scene.","category":"page"},{"location":"layouting/#Auto-determined-width-and-height-1","page":"How layouting works","title":"Auto-determined width and height","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"Some elements can compute their own size, depending on their settings. LText, for example, can compute the bounding box of its text. If an object has no specific content, like an LAxis, the auto-determined width or height will be nothing.","category":"page"},{"location":"layouting/#Computed-width-and-height-1","page":"How layouting works","title":"Computed width and height","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"The computed width and height is the size that the element reports to a GridLayout that it is a content element of. This can be different from the auto-size if the object doesn't want its parent layout to know its auto-size. This is useful if you don't want a column to shrink to the size of an LText, for example.","category":"page"},{"location":"layouting/#Protrusions-1","page":"How layouting works","title":"Protrusions","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"These are four values that tell the GridLayout how much gap space is needed by the element outside of the main element area. With an LAxis that would be the title at the top, y axis at the left side and x axis at the bottom in standard configuration.","category":"page"},{"location":"layouting/#Size-attributes-1","page":"How layouting works","title":"Size attributes","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"The user can specify height and width of an element in different ways, which interact with the suggested bounding box and the auto-determined size to compute the final size of the object and also control how the layout responds to the element's size (used here for either width or height, respectively).","category":"page"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"Fixed or Real: The size is always fixed, no matter what the layout suggests. A GridLayout can auto-adjust column sizes to this size.\nRelative: The size is a fraction of the suggested size. A GridLayout can not auto-adjust column sizes to this size.\nAuto(true): The size is equal to the auto-determined size if that is not nothing, otherwise it's equal to the suggested size. A GridLayout can auto-adjust to this size if it's not nothing.\nAuto(false): The size is equal to the auto-determined size if that is not nothing, otherwise it's equal to the suggested size. A GridLayout can not auto-adjust to this size (useful for single-spanned elements that should not affect the row or column they are in, but use their auto-size themselves).\nnothing: The size is equal to the suggested size. A GridLayout can not auto-adjust column sizes to this size.","category":"page"},{"location":"layouting/#Alignment-attributes-1","page":"How layouting works","title":"Alignment attributes","text":"","category":"section"},{"location":"layouting/#","page":"How layouting works","title":"How layouting works","text":"The user can specify how an element should be aligned relative to its suggested bounding box if it's not of the same size (in which case the alignment just has no effect on placement). Currently, these values can be :left, :right or :center for horizontal alignment and :top, :bottom and :center for vertical alignment.","category":"page"},{"location":"llegend/#Creating-a-legend-1","page":"LLegend","title":"Creating a legend","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing Makie\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.5:10\nys = sin.(xs)\nlin = lines!(ax, xs, ys, color = :blue)\nsca = scatter!(ax, xs, ys, color = :red, markersize = 15px)\n\nleg = LLegend(scene, [lin, sca], [\"a line\", \"some dots\"])\nlayout[1, 2] = leg\n\n# you can add more elements using push\npush!(leg, \"both together\", lin, sca)\n\nsave(\"example_legend.png\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend)","category":"page"},{"location":"llegend/#Multi-column-legend-1","page":"LLegend","title":"Multi-column legend","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"You can control the number of columns with the ncols attribute.","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing Makie\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.1:10\nlins = [lines!(ax, xs, sin.(xs .+ 3v), color = RGBf0(v, 0, 1-v)) for v in 0:0.1:1]\n\nleg = LLegend(scene, lins, string.(1:length(lins)), ncols = 3)\nlayout[1, 2] = leg\n\n\nsave(\"example_legend_ncols.png\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend ncols)","category":"page"},{"location":"llegend/#Legend-inside-an-axis-1","page":"LLegend","title":"Legend inside an axis","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"To place a legend inside an axis you can simply add it to the same layout slot that the axis lives in. As long as the axis is bigger than the legend you can set the legend's height and width to Auto(false) and position it using the align variables. You can use the margin keyword to keep the legend from touching the axis spines.","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.1:10\nlins = [lines!(ax, xs, sin.(xs .* i), color = color)\n    for (i, color) in zip(1:3, [:red, :blue, :green])]\n\nlegends = [LLegend(\n        scene, lins, [\"Line $i\" for i in 1:3],\n        width = Auto(false),\n        margin = (10, 10, 10, 10),\n    ) for j in 1:3]\n\nhaligns = [:left, :right, :center]\nvaligns = [:top, :bottom, :center]\n\nfor (leg, hal, val) in zip(legends, haligns, valigns)\n    layout[1, 1] = leg\n    leg.title = \"$hal & $val\"\n    leg.halign = hal\n    leg.valign = val\nend\n\nsave(\"example_legend_alignment.png\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend alignment)","category":"page"},{"location":"llegend/#Creating-legend-entries-manually-1","page":"LLegend","title":"Creating legend entries manually","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"Sometimes you might want to construct legend entries from scratch to have maximum control. So far you can use LineElements, MarkerElements or PolyElements. Some attributes that can't have a meaningful preset and would usually be inherited from plot objects (like color) have to be explicitly specified. Others are inherited from the legend if they are not specified. These include marker arrangement for MarkerElements or poly shape for PolyElements. You can check the list using this function:","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nMakieLayout.attributenames(LegendEntry)","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing Makie\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nleg = layout[1, 2] = LLegend(scene)\n\nentry1 = LegendEntry(\n    \"Entry 1\",\n    LineElement(color = :red, linestyle = nothing),\n    MarkerElement(color = :blue, marker = 'x', strokecolor = :black),\n)\n\nentry2 = LegendEntry(\n    \"Entry 2\",\n    PolyElement(color = :red, strokecolor = :blue),\n    LineElement(color = :black, linestyle = :dash),\n)\n\nentry3 = LegendEntry(\n    \"Entry 3\",\n    LineElement(color = :green, linestyle = nothing,\n        linepoints = Point2f0[(0, 0), (0, 1), (1, 0), (1, 1)])\n)\n\nentry4 = LegendEntry(\n    \"Entry 4\",\n    MarkerElement(color = :blue, marker = 'π',\n        strokecolor = :transparent,\n        markerpoints = Point2f0[(0.2, 0.2), (0.5, 0.8), (0.8, 0.2)])\n)\n\nentry5 = LegendEntry(\n    \"Entry 5\",\n    PolyElement(color = :green, strokecolor = :black,\n        polypoints = Point2f0[(0, 0), (1, 0), (0, 1)])\n)\n\npush!(leg, entry1)\npush!(leg, entry2)\npush!(leg, entry3)\npush!(leg, entry4)\npush!(leg, entry5)\n\nsave(\"example_legend_entries.png\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend entries)","category":"page"},{"location":"llegend/#Horizontal-legend-1","page":"LLegend","title":"Horizontal legend","text":"","category":"section"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"In case you want the legend entries to be listed horizontally, set the orientation attribute to :horizontal. In this case the ncols attribute refers to the number of rows instead. To keep an adjacent axis from potentially shrinking to the width of the horizontal legend, set width = Auto(false) and height = Auto(true) if you place the legend below or above the axis.","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"using MakieLayout\nusing Makie\nusing AbstractPlotting: px\n\nscene, layout = layoutscene(resolution = (1400, 900))\n\nax = layout[1, 1] = LAxis(scene)\n\nxs = 0:0.5:10\nys = sin.(xs)\nlin = lines!(ax, xs, ys, color = :blue)\nsca = scatter!(ax, xs, ys, color = :red, markersize = 15px)\n\nleg = LLegend(scene, [lin, sca, lin], [\"a line\", \"some dots\", \"line again\"])\nlayout[1, 2] = leg\n\nleg_horizontal = LLegend(scene, [lin, sca, lin], [\"a line\", \"some dots\", \"line again\"],\n    orientation = :horizontal, width = Auto(false), height = Auto(true))\nlayout[2, 1] = leg_horizontal\n\n\nsave(\"example_legend_horizontal.png\", scene); nothing # hide","category":"page"},{"location":"llegend/#","page":"LLegend","title":"LLegend","text":"(Image: example legend)","category":"page"},{"location":"grids/#Nesting-1","page":"GridLayout","title":"Nesting","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"Grids can be nested inside other grids, and so on, to arbitrary depths. The top grid's parent should be the scene in which the layout is placed. When you place a grid inside another grid, that grid is automatically made its parent. Grids also are by default set to alignmode Inside which means that the content edges are aligned to the grid's bounding box, excluding the outer protrusions. This way, plots in nested grids are nicely aligned along their spines.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(30, resolution = (1200, 900))\n\nsubgl_left = GridLayout()\nsubgl_left[1:2, 1:2] = [LAxis(scene) for i in 1:2, j in 1:2]\n\nsubgl_right = GridLayout()\nsubgl_right[1:3, 1] = [LAxis(scene) for i in 1:3]\n\nlayout[1, 1] = subgl_left\nlayout[1, 2] = subgl_right\n\nsave(\"example_nested_grids.png\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: example nested grids)","category":"page"},{"location":"grids/#Alignment-1","page":"GridLayout","title":"Alignment","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"Here you can see the difference between the align modes Outside with and without margins and the Inside alignmode. Only the standard Inside mode aligns the axis spines of the contained axes nicely. The Outside mode is mostly useful for the main GridLayout so that there some space between the window edges and the plots. You can see that the normal axis looks the same as the one placed inside the grid with Inside alignment, and they are both effectively aligned exactly the same.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(30, resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene, title=\"No grid layout\")\nlayout[2, 1] = LAxis(scene, title=\"No grid layout\")\nlayout[3, 1] = LAxis(scene, title=\"No grid layout\")\n\nsubgl_1 = layout[1, 2] = GridLayout(alignmode=Inside())\nsubgl_2 = layout[2, 2] = GridLayout(alignmode=Outside())\nsubgl_3 = layout[3, 2] = GridLayout(alignmode=Outside(50))\n\nsubgl_1[1, 1] = LAxis(scene, title=\"Inside\")\nsubgl_2[1, 1] = LAxis(scene, title=\"Outside\")\nsubgl_3[1, 1] = LAxis(scene, title=\"Outside(50)\")\n\nlayout[1:3, 2] = [LRect(scene, color = :transparent, strokecolor = :red) for i in 1:3]\n\nsave(\"example_grid_alignment.png\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: example grid alignment)","category":"page"},{"location":"grids/#Spanned-Placement-1","page":"GridLayout","title":"Spanned Placement","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"Elements in a grid layout can span multiple rows and columns. You can specify them with the range syntax and colons for the full width or height. You can also use end to specify the last row or column.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(4, 4, 30, resolution = (1200, 1200))\n\nlayout[1, 1:2] = LAxis(scene, title=\"[1, 1:2]\")\nlayout[2:4, 1:2] = LAxis(scene, title=\"[2:4, 1:2]\")\nlayout[:, 3] = LAxis(scene, title=\"[:, 3]\")\nlayout[1:3, end] = LAxis(scene, title=\"[1:3, end]\")\nlayout[end, end] = LAxis(scene, title=\"[end, end]\")\n\nsave(\"example_spanned_grid_content.png\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: spanned grid content)","category":"page"},{"location":"grids/#Auto-resizing-1","page":"GridLayout","title":"Auto-resizing","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"If you index outside of the current range of a grid layout, you do not get an error. Instead, the layout automatically resizes to contain the new indices. This is very useful if you want to iteratively build a layout, or add super or side titles.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(30, resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene)\nfor i in 1:3\n    layout[:, end+1] = LAxis(scene)\n    layout[end+1, :] = LAxis(scene)\nend\n\nlayout[0, :] = LText(scene, text=\"Super Title\", textsize=50)\nlayout[end+1, :] = LText(scene, text=\"Sub Title\", textsize=50)\nlayout[2:end-1, 0] = LText(scene, text=\"Left Text\", textsize=50,\n    rotation=pi/2)\nlayout[2:end-1, end+1] = LText(scene, text=\"Right Text\", textsize=50,\n    rotation=-pi/2)\n\nsave(\"example_indexing_outside_grid.png\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: indexing outside grid)","category":"page"},{"location":"grids/#Column-and-row-sizes-1","page":"GridLayout","title":"Column and row sizes","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"You can manipulate the sizes of rows and columns in a grid. The choices are between fixed widths in pixels, relative widths in fractions of one, aspect ratio widths that are relative to a selected row or column, and auto widths. Auto widths depend on the content of the row or column. Some elements like LText have a determinable width or height. If there are single-span elements in a row that have a determinable height and the row's height is set to auto, it will assume the largest height of all determinable elements it contains. This is very useful for placement of text, or other GUI elements like buttons and sliders. If a row or column does not have a determinable height or width, it defaults to an equal share of the remaining space with all other auto rows or columns. You can adjust the ratio of this share with the Integer argument of the Auto struct.","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (1200, 900), camera=campixel!)\n\nlayout = GridLayout(\n    scene, 6, 6,\n    colsizes = [Fixed(200), Relative(0.25), Auto(), Auto(), Auto(2), Auto()],\n    rowsizes = [Auto(), Fixed(100), Relative(0.25), Aspect(2, 1), Auto(), Auto()],\n    alignmode = Outside(30, 30, 30, 30))\n\n\nfor i in 2:6, j in 1:5\n    if i == 6 && j == 3\n        layout[i, j] = LText(scene, text=\"My Size is Inferred\")\n    else\n        layout[i, j] = LRect(scene)\n    end\nend\n\nfor (j, label) in enumerate([\"Fixed(200)\", \"Relative(0.25)\", \"Auto()\", \"Auto()\", \"Auto(2)\"])\n    layout[1, j] = LText(scene, width = Auto(false), text = label)\nend\n\nfor (i, label) in enumerate([\"Fixed(100)\", \"Relative(0.25)\", \"Aspect(2, 1)\", \"Auto()\", \"Auto()\"])\n    layout[i + 1, 6] = LText(scene, height = Auto(false), text = label)\nend\n\nsave(\"example_row_col_sizes.png\", scene); nothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: row col sizes)","category":"page"},{"location":"grids/#Trimming-empty-rows-and-columns-1","page":"GridLayout","title":"Trimming empty rows and columns","text":"","category":"section"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"If you change a layout interactively and end up with unused rows or columns, trim! will remove those for you:","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(resolution = (600, 600))\n\nrecord(scene, \"example_trimming.mp4\", framerate=1) do io\n\n    ax1 = layout[1, 1] = LAxis(scene, title = \"Axis 1\")\n    recordframe!(io)\n\n    ax2 = layout[1, 2] = LAxis(scene, title = \"Axis 2\")\n    recordframe!(io)\n\n    layout[2, 1] = ax2\n    recordframe!(io)\n\n    trim!(layout)\n    recordframe!(io)\n\n    layout[2, 3:4] = ax1\n    recordframe!(io)\n\n    trim!(layout)\n    recordframe!(io)\nend\n\nnothing # hide","category":"page"},{"location":"grids/#","page":"GridLayout","title":"GridLayout","text":"(Image: hiding decorations)","category":"page"},{"location":"#MakieLayout.jl-1","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"","category":"section"},{"location":"#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"MakieLayout.jl brings a new 2D Axis LAxis and grid layouting with GridLayout to Makie.jl. You can build complex layouts by nesting GridLayouts. You can specify many visual parameters like row and column widths, the gap sizes between the rows and columns, or paddings. 2D axes have many more parameters like titles, labels, ticks, their sizes and colors and alignments, etc. All of these parameters are Observables and the layout updates itself automatically when you change relevant ones.","category":"page"},{"location":"#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"As a starting point, here's an example how you can iteratively build a plot out of its parts:","category":"page"},{"location":"#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"\nusing MakieLayout\nusing Makie\nusing Random # hide\nusing AbstractPlotting: px\nRandom.seed!(2) # hide\n\n# layoutscene is a convenience function that creates a Scene and a GridLayout\n# that are already connected correctly and with Outside alignment\nscene, layout = layoutscene(30, resolution = (1200, 900),\n    backgroundcolor = RGBf0(0.98, 0.98, 0.98))\n\nrecord(scene, \"example_plot_buildup.mp4\", framerate=1) do io\n    frame() = recordframe!(io) # hide\n    ax1 = layout[1, 1] = LAxis(scene, title = \"Group 1\")\n    frame() # hide\n    ax2 = layout[1, 2] = LAxis(scene, title = \"Group 2\")\n    frame() # hide\n    sca1 = scatter!(ax1, randn(100, 2), markersize = 10px, color = :red)\n    frame() # hide\n    sca2 = scatter!(ax1, randn(100, 2) .+ 1, markersize = 10px, marker = 'x',\n        color = :blue)\n    frame() # hide\n    sca3 = scatter!(ax2, randn(100, 2) .+ 2, markersize = 10px, marker = '□',\n        color = :green)\n    frame() # hide\n    sca4 = scatter!(ax2, randn(100, 2) .+ 3, markersize = 10px, color = :orange)\n    frame() # hide\n\n    linkaxes!(ax1, ax2)\n    autolimits!(ax1)\n    frame() # hide\n\n    leg = LLegend(scene, [sca1, sca2, sca3, sca4], [\"alpha\", \"beta\", \"gamma\", \"delta\"],\n        orientation = :horizontal, height = Auto(true), width = Auto(false))\n    layout[2, :] = leg\n    frame() # hide\n\n    ax3 = layout[:, end + 1] = LAxis(scene)\n    frame() # hide\n\n    ts = 0:0.01:20\n    cmap = Node(:viridis)\n    spiral = lines!(ax3, sin.(ts) .* ts, ts, color = ts, colormap = cmap,\n        linewidth = 4)\n    frame() # hide\n\n    ax3.xlabel = \"Horizontal\"\n    frame() # hide\n    ax3.ylabel = \"Vertical\"\n    frame() # hide\n\n    cbar = layout[:, end + 1] = LColorbar(scene, spiral, width = 30)\n    frame() # hide\n    cbar.height = Relative(0.66)\n    frame() # hide\n\n    cmap[] = :inferno\n    frame() # hide\n\n    subgrid = layout[end + 1, :] = GridLayout()\n    frame() # hide\n\n    ax4 = subgrid[1, 1] = LAxis(scene)\n    frame() # hide\n    heatmap!(ax4, randn(50, 30))\n    frame() # hide\n    tightlimits!(ax4)\n    frame() # hide\n\n    sliders = [LSlider(scene) for _ in 1:3]\n    labels = [LText(scene, l, halign = :left) for l in (\"Adjust\", \"Refresh\", \"Compute\")]\n    slidergrid = subgrid[1, 0] = grid!(hcat(labels, sliders), height = Auto(false))\n    frame() # hide\n\n    ax5 = subgrid[1, 0] = LAxis(scene)\n    frame() # hide\n    heatmap!(ax5, randn(50, 30), colormap = :blues)\n    tightlimits!(ax5)\n    frame() # hide\n\n    colsize!(subgrid, 2, Relative(0.5))\n    frame() # hide\n\n    ax4.yaxisposition = :right\n    ax4.yticklabelalign = (:left, :center)\n    frame() # hide\n\n    suptitle = layout[0, :] = LText(scene, \"MakieLayout.jl\")\n    frame() # hide\n    suptitle.textsize = 40\n    frame() # hide\n\n    foreach(tight_ticklabel_spacing!, LAxis, layout)\n    frame() # hide\nend\n\nnothing # hide","category":"page"},{"location":"#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"(Image: example plot buildup)","category":"page"},{"location":"faq/#Elements-are-squashed-into-the-lower-left-corner-1","page":"Frequently Asked Questions","title":"Elements are squashed into the lower left corner","text":"","category":"section"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Layoutable elements require a bounding box that they align themselves to. If you place such an element in a layout, the bounding box is controlled by that layout. If you forget to put an element in a layout, it will have its default bounding box of BBox(0, 100, 0, 100) which ends up being in the lower left corner. You can also choose to specify a bounding box manually if you need more control.","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 1200))\n\nax1 = LAxis(scene, title = \"Squashed\")\nax2 = layout[1, 1] = LAxis(scene, title = \"Placed in Layout\")\nax3 = LAxis(scene, bbox = BBox(400, 800, 400, 800),\n  title = \"Placed at BBox(400, 800, 400, 800)\")\n\nsave(\"faq_squashed_element.png\", scene); nothing # hide","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"(Image: squashed elements)","category":"page"},{"location":"faq/#Columns-or-rows-are-shrunk-to-the-size-of-Text-or-another-element-1","page":"Frequently Asked Questions","title":"Columns or rows are shrunk to the size of Text or another element","text":"","category":"section"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Columns or rows that have size Auto(true) try to determine the width or height of all single-spanned elements that are placed in them, and if any elements report their size the row or column will shrink to the maximum reported size. This is so smaller elements with a known size take as little space as needed. But if there is other content in the row that should take more space, you can give the offending element a size of Auto(false). This way, its own size can be determined automatically, but it doesn't report that to the row or column. Alternatively, you can set the size of that row or column to Auto(false) (or any other value than Auto(true)).","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene(resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene, title = \"Shrunk\")\nlayout[2, 1] = LAxis(scene, title = \"Expanded\")\nlayout[1, 2] = LText(scene, \"My height is Auto(true)\", height = Auto(true))\nlayout[2, 2] = LText(scene, \"My height is Auto(false)\", height = Auto(false))\n\nsave(\"faq_shrunk_row.png\", scene); nothing # hide","category":"page"},{"location":"faq/#","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"(Image: shrunk row)","category":"page"},{"location":"laxis/#LAxis-1","page":"LAxis","title":"LAxis","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"This object represents a 2D axis that has many functions to make it more convenient to use with layouts. For a grid layout, the axis is a rectangle whose size is not yet determined, which has \"protrusions\" sticking out its sides. Those protrusions are the axis decorations like labels, ticks and titles. The protrusions only change if you change something about the axis attributes, but they stay the same when the layout is resized. Therefore, the main axis area will always be determined by the remaining space after the protrusions are subtracted.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"The axis interacts in two directions with the layout. When the size of one of its protrusions changes, this will notify its GridContent. This will then notify its parent GridLayout and so on, until the full layout is recomputed. When that's done, the LAxis object will have received a new bounding box with which it should align given its size and alignment attributes. This is now updated and the axis' subscene is adjusted to its new size. All axis decorations then also update their positions.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing Makie\nusing Animations\n\nscene, layout = layoutscene(resolution = (600, 600))\n\naxes = [LAxis(scene, xlabel = \"x label\", ylabel = \"y label\", title = \"title\")\n    for i in 1:2, j in 1:2]\nlayout[1:2, 1:2] = axes\n\na_title = Animation([0, 2], [30.0, 50.0], sineio(n=2, yoyo=true, prewait=0.2))\na_xlabel = Animation([2, 4], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\na_ylabel = Animation([4, 6], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\n\nrecord(scene, \"example_protrusion_changes.mp4\", 0:1/60:6, framerate = 60) do t\n\n    axes[1, 1].titlesize = a_title(t)\n    axes[1, 1].xlabelsize = a_xlabel(t)\n    axes[1, 1].ylabelsize = a_ylabel(t)\n\nend\n\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: protrusion changes)","category":"page"},{"location":"laxis/#Hiding-axis-decorations-1","page":"LAxis","title":"Hiding axis decorations","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"Hiding axis decorations frees up the space for them in the layout if there are no other protrusions sticking into the same column or row gap that prevent enlarging the axis area. This makes it easy to achieve tight layouts that don't waste space. In this example, we set the column and row gaps to zero, so we can see the shrinking white space better.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (600, 600), camera=campixel!)\n\nlayout = GridLayout(\n    scene, 2, 2, # we need to specify rows and columns so the gap sizes don't get lost\n    addedcolgaps = Fixed(0),\n    addedrowgaps = Fixed(0),\n    alignmode = Outside(30))\n\naxes = [LAxis(scene, xlabel = \"x label\", ylabel = \"y label\", title = \"title\")\n    for j in 1:2, i in 1:2]\nlayout[1:2, 1:2] = axes\n\nrecord(scene, \"example_hiding_decorations.mp4\", framerate=3) do io\n\n    recordframe!(io)\n    for ax in axes\n        ax.titlevisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xlabelvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.ylabelvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xticklabelsvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.yticklabelsvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xticksvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.yticksvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.bottomspinevisible = false\n        ax.leftspinevisible = false\n        ax.topspinevisible = false\n        ax.rightspinevisible = false\n        recordframe!(io)\n    end\nend\n\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: hiding decorations)","category":"page"},{"location":"laxis/#Axis-aspect-ratios-1","page":"LAxis","title":"Axis aspect ratios","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"If you're plotting images, you might want to force a specific aspect ratio of an axis, so that the images are not stretched. The default is that an axis uses all of the available space in the layout. You can use AxisAspect and DataAspect to control the aspect ratio. For example, AxisAspect(1) forces a square axis and AxisAspect(2) results in a rectangle with a width of two times the height. DataAspect uses the currently chosen axis limits and brings the axes into the same aspect ratio. This is the easiest to use with images. A different aspect ratio can only reduce the axis space that is being used, also it necessarily has to break the layout a little bit.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing Makie\nusing FileIO\nusing Random # hide\nRandom.seed!(1) # hide\n\nscene, layout = layoutscene(30, resolution = (1200, 900))\n\naxes = [LAxis(scene) for i in 1:2, j in 1:3]\ntightlimits!.(axes)\nlayout[1:2, 1:3] = axes\n\nimg = rotr90(load(\"cow.png\"))\n\nfor ax in axes\n    image!(ax, img)\nend\n\naxes[1, 1].title = \"Default\"\n\naxes[1, 2].title = \"DataAspect\"\naxes[1, 2].aspect = DataAspect()\n\naxes[1, 3].title = \"AxisAspect(418/348)\"\naxes[1, 3].aspect = AxisAspect(418/348)\n\naxes[2, 1].title = \"AxisAspect(1)\"\naxes[2, 1].aspect = AxisAspect(1)\n\naxes[2, 2].title = \"AxisAspect(2)\"\naxes[2, 2].aspect = AxisAspect(2)\n\naxes[2, 3].title = \"AxisAspect(0.5)\"\naxes[2, 3].aspect = AxisAspect(0.5)\n\nsave(\"example_axis_aspects.png\", scene) # hide\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: axis aspects)","category":"page"},{"location":"laxis/#Controlling-data-aspect-ratios-1","page":"LAxis","title":"Controlling data aspect ratios","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"If you want the content of an axis to adhere to a certain data aspect ratio, there is another way than forcing the aspect ratio of the whole axis to be the same, and possibly breaking the layout. This works via the axis attribute autolimitaspect. It can either be set to nothing which means the data limits can have any arbitrary aspect ratio. Or it can be set to a number, in which case the targeted limits of the axis (that are computed by autolimits!) are enlarged to have the correct aspect ratio.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can see the different ways to get a plot with an unstretched circle, using different ways of setting aspect ratios, in the following example.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing Makie\nusing Animations\n\n# scene setup for animation\n\ncontainer_scene = Scene(camera = campixel!, resolution = (1200, 1200))\n\nt = Node(0.0)\n\na_width = Animation([1, 7], [1200.0, 800], sineio(n=2, yoyo=true, postwait=0.5))\na_height = Animation([2.5, 8.5], [1200.0, 800], sineio(n=2, yoyo=true, postwait=0.5))\n\nscene_area = lift(t) do t\n    IRect(0, 0, round(Int, a_width(t)), round(Int, a_height(t)))\nend\n\nscene = Scene(container_scene, scene_area, camera = campixel!)\n\nrect = poly!(scene, scene_area,\n    raw=true, color=RGBf0(0.97, 0.97, 0.97), strokecolor=:transparent, strokewidth=0)[end]\n\nouter_layout = GridLayout(scene, alignmode = Outside(30))\n\n\n\n# example begins here\n\nlayout = outer_layout[1, 1] = GridLayout()\n\ntitles = [\"aspect via layout\", \"axis aspect\", \"data aspect\", \"no aspect\"]\naxs = layout[1:2, 1:2] = [LAxis(scene, title = t) for t in titles]\n\nfor a in axs\n    lines!(a, Circle(Point2f0(0, 0), 100f0))\nend\n\nrowsize!(layout, 1, Relative(0.4))\n# force the layout cell [1, 1] to be square\ncolsize!(layout, 1, Aspect(1, 1))\n\naxs[2].aspect = 1\naxs[3].autolimitaspect = 1\n\nrects = layout[1:2, 1:2] = [LRect(scene, color = (:black, 0.05),\n    strokecolor = :transparent) for _ in 1:4]\n\nrecord(container_scene, \"example_circle_aspect_ratios.mp4\", 0:1/60:9; framerate=60) do ti\n    t[] = ti\nend\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: example circle aspect ratios)","category":"page"},{"location":"laxis/#Linking-axes-1","page":"LAxis","title":"Linking axes","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can link axes to each other. Every axis simply keeps track of a list of other axes which it updates when it is changed itself. You can link x and y dimensions separately.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"using Makie\nusing MakieLayout\n\nscene, layout = layoutscene()\n\nlayout[1, 1:3] = axs = [LAxis(scene) for i in 1:3]\nlinkxaxes!(axs[1:2]...)\nlinkyaxes!(axs[2:3]...)\n\naxs[1].title = \"x linked\"\naxs[2].title = \"x & y linked\"\naxs[3].title = \"y linked\"\n\nfor i in 1:3\n    lines!(axs[i], 1:10, 1:10, color = \"green\")\n    if i != 1\n        lines!(axs[i], 1:10, 11:20, color = \"blue\")\n    end\n    if i != 3\n        lines!(axs[i], 11:20, 1:10, color = \"red\")\n    end\nend\n\nsave(\"example_linked_axes.png\", scene) # hide\nnothing # hide","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"(Image: linked axes)","category":"page"},{"location":"laxis/#Axis-interaction-1","page":"LAxis","title":"Axis interaction","text":"","category":"section"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can zoom in an axis by scrolling and pan by right-clicking and dragging. The limits can be reset using ctrl + click. Alternatively, you can just call autolimits! on the axis.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"For some axes you might want to limit zooming and panning to one dimension or disable it completely. This can be achieved using the attributes xpanlock, ypanlock, xzoomlock and yzoomlock.","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"# an LAxis that can only be zoomed and panned horizontally, for example for\n# temporal signals like audio\nax = LAxis(scene, ypanlock = true, yzoomlock = true)","category":"page"},{"location":"laxis/#","page":"LAxis","title":"LAxis","text":"You can also interactively limit zoom and pan directions by pressing and holding a button during zooming or panning. By default those buttons are x and y, respectively, but you can change them with the attributes xpankey, ypankey, xzoomkey and yzoomkey. Buttons can be found in AbstractPlotting.Keyboard, for example the x button is accessed as AbstractPlotting.Keyboard.x.","category":"page"}]
}
