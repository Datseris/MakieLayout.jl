var documenterSearchIndex = {"docs":
[{"location":"layoutedaxis.html#Layouted-Axis-1","page":"LayoutedAxis","title":"Layouted Axis","text":"","category":"section"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"This object represents a 2D axis that has many functions to make it more convenient to use with layouts. For a grid layout, the axis is a rectangle whose size is not yet determined, which has \"protrusions\" sticking out its sides. Those protrusions are the axis decorations like labels, ticks and titles. The protrusions only change if you change something about the axis attributes, but they stay the same when the layout is resized. Therefore, the main axis area will always be determined by the remaining space after the protrusions are subtracted.","category":"page"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"The axis interacts in two directions with the layout. When the size of one of its protrusions changes, this will notify any associated AxisLayout object. This will then notify its parent GridLayout, and so on, until the full layout is recomputed. After that's done, the AxisLayout will have received a new bounding box in which to place its content. The LayoutedAxis has a bounding box node which determines the borders of the central plot area. This is now updated and the axis' subscene is adjusted to its new size. All axis decorations also update their positions.","category":"page"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"using MakieLayout\nusing Makie\nusing Animations\n\nscene = Scene(resolution = (600, 600), camera=campixel!)\n\nmaingl = GridLayout(\n    2, 2,\n    parent = scene,\n    alignmode = Outside(30, 30, 30, 30))\n\nlas = [maingl[i, j] = LayoutedAxis(scene) for i in 1:2, j in 1:2]\n\na_title = Animation([0, 2], [30.0, 50.0], sineio(n=2, yoyo=true, prewait=0.2))\na_xlabel = Animation([2, 4], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\na_ylabel = Animation([4, 6], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\n\nrecord(scene, \"example_protrusion_changes.mp4\", 0:1/25:6) do t\n\n    las[1, 1].titlesize = a_title(t)\n    las[1, 1].xlabelsize = a_xlabel(t)\n    las[1, 1].ylabelsize = a_ylabel(t)\n\nend\n\nnothing # hide","category":"page"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"(Image: protrusion changes)","category":"page"},{"location":"layoutedaxis.html#Hiding-axis-decorations-1","page":"LayoutedAxis","title":"Hiding axis decorations","text":"","category":"section"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"Hiding axis decorations frees up the space for them in the layout if there are no other protrusions sticking into the same column or row gap that prevent enlarging the axis area. This makes it easy to achieve tight layouts that don't waste space. In this example, we set the column and row gaps to zero, so we can see the shrinking white space better.","category":"page"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (600, 600), camera=campixel!)\n\nmaingl = GridLayout(\n    2, 2,\n    parent = scene,\n    addedcolgaps = Fixed(0),\n    addedrowgaps = Fixed(0),\n    alignmode = Outside(30, 30, 30, 30))\n\nlas = [maingl[i, j] = LayoutedAxis(scene) for j in 1:2, i in 1:2]\n\nrecord(scene, \"example_hiding_decorations.mp4\", framerate=3) do io\n\n    recordframe!(io)\n    for la in las\n        la.titlevisible = false\n        recordframe!(io)\n    end\n    for la in las\n        la.xlabelvisible = false\n        recordframe!(io)\n    end\n    for la in las\n        la.ylabelvisible = false\n        recordframe!(io)\n    end\n    for la in las\n        la.xticklabelsvisible = false\n        recordframe!(io)\n    end\n    for la in las\n        la.yticklabelsvisible = false\n        recordframe!(io)\n    end\n    for la in las\n        la.xticksvisible = false\n        recordframe!(io)\n    end\n    for la in las\n        la.yticksvisible = false\n        recordframe!(io)\n    end\n    for la in las\n        la.rightspinevisible = false\n        la.leftspinevisible = false\n        la.bottomspinevisible = false\n        la.topspinevisible = false\n        recordframe!(io)\n    end\nend\n\nnothing # hide","category":"page"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"(Image: hiding decorations)","category":"page"},{"location":"layoutedaxis.html#Axis-aspect-ratios-1","page":"LayoutedAxis","title":"Axis aspect ratios","text":"","category":"section"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"If you're plotting images, you might want to force a specific aspect ratio of an axis, so that the images are not stretched. The default is that an axis uses all of the available space in the layout. You can use AxisAspect and DataAspect to control the aspect ratio. For example, AxisAspect(1) forces a square axis and AxisAspect(2) results in a rectangle with a width of two times the height. DataAspect uses the currently chosen axis limits and brings the axes into the same aspect ratio. This is the easiest to use with images. A different aspect ratio can only reduce the axis space that is being used, also it necessarily has to break the layout a little bit.","category":"page"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"using MakieLayout\nusing Makie\nusing FileIO\nusing Random # hide\nRandom.seed!(1) # hide\n\nscene = Scene(resolution = (1200, 900), camera=campixel!)\n\nmaingl = GridLayout(\n    2, 3,\n    parent = scene,\n    alignmode = Outside(30, 30, 30, 30))\n\nlas = [maingl[i, j] = LayoutedAxis(scene,\n    xautolimitmargin=(0, 0), yautolimitmargin=(0, 0)) for i in 1:2, j in 1:3]\n\nimg = reverse(load(\"cow.png\"), dims=1)'\n\nfor la in las\n    image!(la, img)\nend\n\nlas[1, 1].title = \"Default\"\n\nlas[1, 2].title = \"DataAspect\"\nlas[1, 2].aspect = DataAspect()\n\nlas[1, 3].title = \"AxisAspect(418/348)\"\nlas[1, 3].aspect = AxisAspect(418/348)\n\nlas[2, 1].title = \"AxisAspect(1)\"\nlas[2, 1].aspect = AxisAspect(1)\n\nlas[2, 2].title = \"AxisAspect(2)\"\nlas[2, 2].aspect = AxisAspect(2)\n\nlas[2, 3].title = \"AxisAspect(0.5)\"\nlas[2, 3].aspect = AxisAspect(0.5)\n\nsave(\"example_axis_aspects.png\", scene) # hide\nnothing # hide","category":"page"},{"location":"layoutedaxis.html#","page":"LayoutedAxis","title":"LayoutedAxis","text":"(Image: axis aspects)","category":"page"},{"location":"grids.html#Nesting-grids-1","page":"Grids","title":"Nesting grids","text":"","category":"section"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"Grids can be nested inside other grids, and so on, to arbitrary depths. The top grid's parent should be the scene in which the layout is placed. When you place a grid inside another grid, that grid is automatically made its parent. Grids also are by default set to alignmode Inside which means that the content edges are aligned to the grid's bounding box, excluding the outer protrusions. This way, plots in nested grids are nicely aligned along their spines.","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (1200, 900), camera=campixel!)\n\nmaingl = GridLayout(\n    1, 2,\n    parent = scene,\n    alignmode = Outside(30, 30, 30, 30))\n\nsubgl_left = maingl[1, 1] = GridLayout(2, 2)\n\nfor i in 1:2, j in 1:2\n    subgl_left[i, j] = LayoutedAxis(scene)\nend\n\nsubgl_right = maingl[1, 2] = GridLayout(3, 1)\n\nfor i in 1:3\n    subgl_right[i, 1] = LayoutedAxis(scene)\nend\n\nsave(\"example_nested_grids.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"(Image: example nested grids)","category":"page"},{"location":"grids.html#Grid-alignment-1","page":"Grids","title":"Grid alignment","text":"","category":"section"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"Here you can see the difference between the align modes Outside with and without margins and the Inside alignmode. Only the standard Inside mode aligns the axis spines of the contained axes nicely. The Outside mode is mostly useful for the main GridLayout so that there some space between the window edges and the plots. You can see that the normal axis looks the same as the one placed inside the grid with Inside alignment, and they are both effectively aligned exactly the same.","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (1200, 1200), camera=campixel!)\n\nmaingl = GridLayout(\n    3, 2,\n    parent = scene,\n    alignmode = Outside(30, 30, 30, 30))\n\nmaingl[1, 1] = LayoutedAxis(scene, title=\"No grid layout\")\nmaingl[2, 1] = LayoutedAxis(scene, title=\"No grid layout\")\nmaingl[3, 1] = LayoutedAxis(scene, title=\"No grid layout\")\n\nsubgl_1 = maingl[1, 2] = GridLayout(1, 1, alignmode=Inside())\nsubgl_2 = maingl[2, 2] = GridLayout(1, 1, alignmode=Outside())\nsubgl_3 = maingl[3, 2] = GridLayout(1, 1, alignmode=Outside(50))\n\nsubgl_1[1, 1] = LayoutedAxis(scene, title=\"Inside\")\nsubgl_2[1, 1] = LayoutedAxis(scene, title=\"Outside\")\nsubgl_3[1, 1] = LayoutedAxis(scene, title=\"Outside(50)\")\n\nsave(\"example_grid_alignment.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"(Image: example grid alignment)","category":"page"},{"location":"grids.html#Spanned-Grid-Content-1","page":"Grids","title":"Spanned Grid Content","text":"","category":"section"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"Elements in a grid layout can span multiple rows and columns. You can specify them with the range syntax and colons for the full width or height. You can also use end to specify the last row or column.","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (1200, 1200), camera=campixel!)\n\nmaingl = GridLayout(\n    4, 4,\n    parent = scene,\n    alignmode = Outside(30, 30, 30, 30))\n\nmaingl[1, 1:2] = LayoutedAxis(scene, title=\"[1, 1:2]\")\nmaingl[2:4, 1:2] = LayoutedAxis(scene, title=\"[2:4, 1:2]\")\nmaingl[:, 3] = LayoutedAxis(scene, title=\"[:, 3]\")\nmaingl[1:3, end] = LayoutedAxis(scene, title=\"[1:3, end]\")\nmaingl[end, end] = LayoutedAxis(scene, title=\"[end, end]\")\n\nsave(\"example_spanned_grid_content.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"(Image: spanned grid content)","category":"page"},{"location":"grids.html#Indexing-outside-of-a-grid-layout-1","page":"Grids","title":"Indexing outside of a grid layout","text":"","category":"section"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"If you index outside of the current range of a grid layout, you do not get an error. Instead, the layout automatically resizes to contain the new indices. This is very useful if you want to iteratively build a layout, or add super or side titles.","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (1200, 1200), camera=campixel!)\n\nmaingl = GridLayout(\n    1, 1,\n    parent = scene,\n    alignmode = Outside(30, 30, 30, 30))\n\n\nmaingl[1, 1] = LayoutedAxis(scene)\nfor i in 1:3\n    maingl[:, end+1] = LayoutedAxis(scene)\n    maingl[end+1, :] = LayoutedAxis(scene)\nend\n\nmaingl[0, :] = LayoutedText(scene, text=\"Super Title\", textsize=50)\nmaingl[end+1, :] = LayoutedText(scene, text=\"Sub Title\", textsize=50)\nmaingl[2:end-1, 0] = LayoutedText(scene, text=\"Left Text\", textsize=50,\n    rotation=pi/2)\nmaingl[2:end-1, end+1] = LayoutedText(scene, text=\"Right Text\", textsize=50,\n    rotation=-pi/2)\n\nsave(\"example_indexing_outside_grid.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"(Image: indexing outside grid)","category":"page"},{"location":"grids.html#Column-and-row-sizes-1","page":"Grids","title":"Column and row sizes","text":"","category":"section"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"You can manipulate the sizes of rows and columns in a grid. The choices are between fixed widths in pixels, relative widths in fractions of one, aspect ratio widths that are relative to a selected row or column, and auto widths. Auto widths depend on the content of the row or column. Some elements like LayoutedText have a determinable width or height. If there are single-span elements in a row that have a determinable height and the row's height is set to auto, it will assume the largest height of all determinable elements it contains. This is very useful for placement of text, or other GUI elements like buttons and sliders. If a row or column does not have a determinable height or width, it defaults to an equal share of the remaining space with all other auto rows or columns. You can adjust the ratio of this share with the Integer argument of the Auto struct.","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (1200, 900), camera=campixel!)\n\nmaingl = GridLayout(\n    5, 5,\n    parent = scene,\n    colsizes = [Fixed(200), Relative(0.25), Auto(), Auto(), Auto(2)],\n    rowsizes = [Fixed(100), Relative(0.25), Aspect(2, 1), Auto(), Auto()],\n    alignmode = Outside(30, 30, 30, 30))\n\n\nfor i in 1:5, j in 1:5\n    if i == 5 && j == 3\n        maingl[i, j] = LayoutedText(scene, text=\"My Size is Inferred\")\n    else\n        maingl[i, j] = LayoutedAxis(scene, titlevisible=false,\n            xlabelvisible=false, ylabelvisible=false, xticklabelsvisible=false,\n            yticklabelsvisible=false)\n    end\nend\n\nsave(\"example_row_col_sizes.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"Grids","title":"Grids","text":"(Image: row col sizes)","category":"page"},{"location":"index.html#MakieLayout.jl-1","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"","category":"section"},{"location":"index.html#Intro-1","page":"MakieLayout.jl","title":"Intro","text":"","category":"section"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"MakieLayout.jl brings a new 2D Axis object and grid layouting to Makie.jl. You can build your layouts as grids that are nested within other grids. For grid layouts, you can specify many visual parameters like row and column widths, the gap sizes between the rows and columns, or paddings. 2D axes have many more parameters like titles, labels, ticks, their sizes and colors and alignments, etc. All of these parameters are Observables and the layout updates itself automatically when you change them.","category":"page"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"As a starting point, here's one example that creates a fairly standard faceting layout like you might know from ggplot :","category":"page"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"using MakieLayout\nusing Makie\nusing Random # hide\nRandom.seed!(1) # hide\n\nscene = Scene(resolution = (1200, 900), camera=campixel!)\n\nnrows = 4\nncols = 5\n\n# Create the main GridLayout that is the parent of all other layout objects.\n# We set its own parent to the scene it belongs to, this way it will recompute\n# itself when the scene size changes, e.g., when you resize the window.\n# We also specify the `alignmode` as Outside, which means that everything\n# including the decorations of the grid content will fit into the window, with a\n# margin of 30px to each side\nmaingl = GridLayout(\n    nrows, ncols,\n    parent = scene,\n    alignmode = Outside(30, 30, 30, 30))\n\n# create a grid of LayoutedAxis objects and at the same time place them in the\n# grid layout with indexing syntax\nlas = [maingl[i, j] = LayoutedAxis(scene) for i in 1:nrows, j in 1:ncols]\n\n# link x and y axes of all LayoutedAxis objects\nlinkxaxes!(las...)\nlinkyaxes!(las...)\n\nfor i in 1:nrows, j in 1:ncols\n\n    # plot into the scene that is managed by the LayoutedAxis\n    scatter!(las[i, j], rand(200, 2) .+ [i j])\n\n    # remove unnecessary decorations in some of the facets, this will have an\n    # effect on the layout as the freed up space will be used to make the axes\n    # bigger\n    i > 1 && (las[i, j].titlevisible = false)\n    j > 1 && (las[i, j].ylabelvisible = false)\n    j > 1 && (las[i, j].yticklabelsvisible = false)\n    j > 1 && (las[i, j].yticksvisible = false)\n    i < nrows && (las[i, j].xticklabelsvisible = false)\n    i < nrows && (las[i, j].xticksvisible = false)\n    i < nrows && (las[i, j].xlabelvisible = false)\nend\n\n# index into the 0th row, thereby adding a new row into the layout and place\n# a text object across the full column width as a super title\nmaingl[0, :] = LayoutedText(scene, text=\"Super Title\", textsize=50)\n\n# place a title on the side by going from the second row to the last (because\n# in the first row, there is now the super title) and adding a column to the end\n# by indexing one column further than the last index\nmaingl[2:end, end+1] = LayoutedText(scene, text=\"Side Title\", textsize=50,\n    rotation=-pi/2)\n\nsave(\"example_intro.png\", scene); nothing # hide","category":"page"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"(Image: example intro)","category":"page"}]
}
