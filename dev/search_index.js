var documenterSearchIndex = {"docs":
[{"location":"layouting.html#How-layouting-works-1","page":"How layouting works","title":"How layouting works","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"The goal of MakieLayout is that all elements placed in a scene fit into the window, fill the available space, and are nicely aligned relative to each other. This works by using GridLayout objects that determine how wide their rows and columns should be given their content elements.","category":"page"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"Content elements have inner widths and heights, as well as four protrusions, that tell how far supporting content (like axis decorations) sticks out from the main part. The protrusions are meant to stick into the gaps between grid cells, and not every element has meaningful protrusions. They are mostly meant to allow for alignment of axes along their spines.","category":"page"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"Each element in a layout should have a couple of nodes that support the layout computations.","category":"page"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"Suggested bounding box\nComputed bounding box\nAuto-determined width and height\nComputed width and height\nProtrusions\nSize attributes\nAlignment attributes","category":"page"},{"location":"layouting.html#Suggested-bounding-box-1","page":"How layouting works","title":"Suggested bounding box","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"This is the bounding box that is suggested to the element. Depending on the settings of the element, it can choose to align perfectly with this bounding box or, if its actual dimensions differ, how it should align inside that rectangle. A small LText can for example be aligned top-left inside a big available suggested bounding box.","category":"page"},{"location":"layouting.html#Computed-bounding-box-1","page":"How layouting works","title":"Computed bounding box","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"This is the bounding box of the element after it has received a suggested bounding box and applied its own layout logic. This is the bounding box in which the elements main area will be in the scene.","category":"page"},{"location":"layouting.html#Auto-determined-width-and-height-1","page":"How layouting works","title":"Auto-determined width and height","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"Some elements can compute their own size, depending on their settings. LText, for example, can compute the bounding box of its text. If an object has no specific content, like an LAxis, the auto-determined width or height will be nothing.","category":"page"},{"location":"layouting.html#Computed-width-and-height-1","page":"How layouting works","title":"Computed width and height","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"The computed width and height is the size that the element reports to a GridLayout that it is a content element of. This can be different from the auto-size if the object doesn't want its parent layout to know its auto-size. This is useful if you don't want a column to shrink to the size of an LText, for example.","category":"page"},{"location":"layouting.html#Protrusions-1","page":"How layouting works","title":"Protrusions","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"These are four values that tell the GridLayout how much gap space is needed by the element outside of the main element area. With an LAxis that would be the title at the top, y axis at the left side and x axis at the bottom in standard configuration.","category":"page"},{"location":"layouting.html#Size-attributes-1","page":"How layouting works","title":"Size attributes","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"The user can specify height and width of an element in different ways, which interact with the suggested bounding box and the auto-determined size to compute the final size of the object and also control how the layout responds to the element's size (used here for either width or height, respectively).","category":"page"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"Fixed or Real: The size is always fixed, no matter what the layout suggests. A GridLayout can auto-adjust column sizes to this size.\nRelative: The size is a fraction of the suggested size. A GridLayout can not auto-adjust column sizes to this size.\nAuto(true): The size is equal to the auto-determined size if that is not nothing, otherwise it's equal to the suggested size. A GridLayout can auto-adjust to this size if it's not nothing.\nAuto(false): The size is equal to the auto-determined size if that is not nothing, otherwise it's equal to the suggested size. A GridLayout can not auto-adjust to this size (useful for single-spanned elements that should not affect the row or column they are in, but use their auto-size themselves).\nnothing: The size is equal to the suggested size. A GridLayout can not auto-adjust column sizes to this size.","category":"page"},{"location":"layouting.html#Alignment-attributes-1","page":"How layouting works","title":"Alignment attributes","text":"","category":"section"},{"location":"layouting.html#","page":"How layouting works","title":"How layouting works","text":"The user can specify how an element should be aligned relative to its suggested bounding box if it's not of the same size (in which case the alignment just has no effect on placement). Currently, these values can be :left, :right or :center for horizontal alignment and :top, :bottom and :center for vertical alignment.","category":"page"},{"location":"grids.html#Nesting-1","page":"GridLayout","title":"Nesting","text":"","category":"section"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"Grids can be nested inside other grids, and so on, to arbitrary depths. The top grid's parent should be the scene in which the layout is placed. When you place a grid inside another grid, that grid is automatically made its parent. Grids also are by default set to alignmode Inside which means that the content edges are aligned to the grid's bounding box, excluding the outer protrusions. This way, plots in nested grids are nicely aligned along their spines.","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(30, resolution = (1200, 900))\n\nsubgl_left = GridLayout()\nsubgl_left[1:2, 1:2] = [LAxis(scene) for i in 1:2, j in 1:2]\n\nsubgl_right = GridLayout()\nsubgl_right[1:3, 1] = [LAxis(scene) for i in 1:3]\n\nlayout[1, 1] = subgl_left\nlayout[1, 2] = subgl_right\n\nsave(\"example_nested_grids.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"(Image: example nested grids)","category":"page"},{"location":"grids.html#Alignment-1","page":"GridLayout","title":"Alignment","text":"","category":"section"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"Here you can see the difference between the align modes Outside with and without margins and the Inside alignmode. Only the standard Inside mode aligns the axis spines of the contained axes nicely. The Outside mode is mostly useful for the main GridLayout so that there some space between the window edges and the plots. You can see that the normal axis looks the same as the one placed inside the grid with Inside alignment, and they are both effectively aligned exactly the same.","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(30, resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene, title=\"No grid layout\")\nlayout[2, 1] = LAxis(scene, title=\"No grid layout\")\nlayout[3, 1] = LAxis(scene, title=\"No grid layout\")\n\nsubgl_1 = layout[1, 2] = GridLayout(alignmode=Inside())\nsubgl_2 = layout[2, 2] = GridLayout(alignmode=Outside())\nsubgl_3 = layout[3, 2] = GridLayout(alignmode=Outside(50))\n\nsubgl_1[1, 1] = LAxis(scene, title=\"Inside\")\nsubgl_2[1, 1] = LAxis(scene, title=\"Outside\")\nsubgl_3[1, 1] = LAxis(scene, title=\"Outside(50)\")\n\nlayout[1:3, 2] = [LRect(scene, color = :transparent, strokecolor = :red) for i in 1:3]\n\nsave(\"example_grid_alignment.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"(Image: example grid alignment)","category":"page"},{"location":"grids.html#Spanned-Placement-1","page":"GridLayout","title":"Spanned Placement","text":"","category":"section"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"Elements in a grid layout can span multiple rows and columns. You can specify them with the range syntax and colons for the full width or height. You can also use end to specify the last row or column.","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(4, 4, 30, resolution = (1200, 1200))\n\nlayout[1, 1:2] = LAxis(scene, title=\"[1, 1:2]\")\nlayout[2:4, 1:2] = LAxis(scene, title=\"[2:4, 1:2]\")\nlayout[:, 3] = LAxis(scene, title=\"[:, 3]\")\nlayout[1:3, end] = LAxis(scene, title=\"[1:3, end]\")\nlayout[end, end] = LAxis(scene, title=\"[end, end]\")\n\nsave(\"example_spanned_grid_content.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"(Image: spanned grid content)","category":"page"},{"location":"grids.html#Auto-resizing-1","page":"GridLayout","title":"Auto-resizing","text":"","category":"section"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"If you index outside of the current range of a grid layout, you do not get an error. Instead, the layout automatically resizes to contain the new indices. This is very useful if you want to iteratively build a layout, or add super or side titles.","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene, layout = layoutscene(30, resolution = (1200, 1200))\n\nlayout[1, 1] = LAxis(scene)\nfor i in 1:3\n    layout[:, end+1] = LAxis(scene)\n    layout[end+1, :] = LAxis(scene)\nend\n\nlayout[0, :] = LText(scene, text=\"Super Title\", textsize=50)\nlayout[end+1, :] = LText(scene, text=\"Sub Title\", textsize=50)\nlayout[2:end-1, 0] = LText(scene, text=\"Left Text\", textsize=50,\n    rotation=pi/2)\nlayout[2:end-1, end+1] = LText(scene, text=\"Right Text\", textsize=50,\n    rotation=-pi/2)\n\nsave(\"example_indexing_outside_grid.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"(Image: indexing outside grid)","category":"page"},{"location":"grids.html#Column-and-row-sizes-1","page":"GridLayout","title":"Column and row sizes","text":"","category":"section"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"You can manipulate the sizes of rows and columns in a grid. The choices are between fixed widths in pixels, relative widths in fractions of one, aspect ratio widths that are relative to a selected row or column, and auto widths. Auto widths depend on the content of the row or column. Some elements like LText have a determinable width or height. If there are single-span elements in a row that have a determinable height and the row's height is set to auto, it will assume the largest height of all determinable elements it contains. This is very useful for placement of text, or other GUI elements like buttons and sliders. If a row or column does not have a determinable height or width, it defaults to an equal share of the remaining space with all other auto rows or columns. You can adjust the ratio of this share with the Integer argument of the Auto struct.","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (1200, 900), camera=campixel!)\n\nlayout = GridLayout(\n    scene, 5, 5,\n    colsizes = [Fixed(200), Relative(0.25), Auto(), Auto(), Auto(2)],\n    rowsizes = [Fixed(100), Relative(0.25), Aspect(2, 1), Auto(), Auto()],\n    alignmode = Outside(30, 30, 30, 30))\n\n\nfor i in 1:5, j in 1:5\n    if i == 5 && j == 3\n        layout[i, j] = LText(scene, text=\"My Size is Inferred\")\n    else\n        layout[i, j] = LAxis(scene, titlevisible=false,\n            xlabelvisible=false, ylabelvisible=false, xticklabelsvisible=false,\n            yticklabelsvisible=false)\n    end\nend\n\nsave(\"example_row_col_sizes.png\", scene); nothing # hide","category":"page"},{"location":"grids.html#","page":"GridLayout","title":"GridLayout","text":"(Image: row col sizes)","category":"page"},{"location":"index.html#MakieLayout.jl-1","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"","category":"section"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"MakieLayout.jl brings a new 2D Axis LAxis and grid layouting with GridLayout to Makie.jl. You can build your layouts as grids that are nested within other grids. For grid layouts, you can specify many visual parameters like row and column widths, the gap sizes between the rows and columns, or paddings. 2D axes have many more parameters like titles, labels, ticks, their sizes and colors and alignments, etc. All of these parameters are Observables and the layout updates itself automatically when you change relevant ones.","category":"page"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"As a starting point, here's one example that creates a fairly standard faceting layout like you might know from ggplot:","category":"page"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"\nusing MakieLayout\nusing Makie\nusing Random # hide\nRandom.seed!(2) # hide\n\n# layoutscene is a convenience function that creates a Scene and a GridLayout\n# that are already connected correctly and with Outside alignment\nscene, layout = layoutscene(30, resolution = (1200, 1200))\n\nncols = 4\nnrows = 4\n\n# create a grid of LAxis objects\naxes = [LAxis(scene) for i in 1:nrows, j in 1:ncols]\n# and place them into the layout\nlayout[1:nrows, 1:ncols] = axes\n\n# link x and y axes of all LAxis objects\nlinkxaxes!(axes...)\nlinkyaxes!(axes...)\n\nlineplots = [lines!(axes[i, j], 1:0.1:8pi, sin.(1:0.1:8pi) .* i .+ j,\n        color = rand(RGBf0), linewidth = 4)\n    for i in 1:nrows, j in 1:ncols]\n\nfor i in 1:nrows, j in 1:ncols\n    # remove unnecessary decorations in some of the facets, this will have an\n    # effect on the layout as the freed up space will be used to make the axes\n    # bigger\n    i > 1 && (axes[i, j].titlevisible = false)\n    j > 1 && (axes[i, j].ylabelvisible = false)\n    j > 1 && (axes[i, j].yticklabelsvisible = false)\n    j > 1 && (axes[i, j].yticksvisible = false)\n    i < nrows && (axes[i, j].xticklabelsvisible = false)\n    i < nrows && (axes[i, j].xticksvisible = false)\n    i < nrows && (axes[i, j].xlabelvisible = false)\nend\n\nlegend = LLegend(scene, lineplots, [\"Line $i\" for i in 1:length(lineplots)],\n    ncols = 2)\n# place a legend on the side by indexing into one column after the current last\nlayout[:, end+1] = legend\n\n# index into the 0th row, thereby adding a new row into the layout and place\n# a text object across the first four columns as a super title\nlayout[0, 1:4] = LText(scene, text=\"MakieLayout Facets\", textsize=50)\n\nsave(\"example_intro.png\", scene); nothing # hide","category":"page"},{"location":"index.html#","page":"MakieLayout.jl","title":"MakieLayout.jl","text":"(Image: example intro)","category":"page"},{"location":"laxis.html#LAxis-1","page":"LAxis","title":"LAxis","text":"","category":"section"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"This object represents a 2D axis that has many functions to make it more convenient to use with layouts. For a grid layout, the axis is a rectangle whose size is not yet determined, which has \"protrusions\" sticking out its sides. Those protrusions are the axis decorations like labels, ticks and titles. The protrusions only change if you change something about the axis attributes, but they stay the same when the layout is resized. Therefore, the main axis area will always be determined by the remaining space after the protrusions are subtracted.","category":"page"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"The axis interacts in two directions with the layout. When the size of one of its protrusions changes, this will notify its GridContent. This will then notify its parent GridLayout and so on, until the full layout is recomputed. After that's done, the ProtrusionLayout will have received a new bounding box in which to place its content. The LAxis has a bounding box node which determines the borders of the central plot area. This is now updated and the axis' subscene is adjusted to its new size. All axis decorations also update their positions.","category":"page"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing Makie\nusing Animations\n\nscene, layout = layoutscene(resolution = (600, 600))\n\naxes = [LAxis(scene) for i in 1:2, j in 1:2]\nlayout[1:2, 1:2] = axes\n\na_title = Animation([0, 2], [30.0, 50.0], sineio(n=2, yoyo=true, prewait=0.2))\na_xlabel = Animation([2, 4], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\na_ylabel = Animation([4, 6], [20.0, 40.0], sineio(n=2, yoyo=true, prewait=0.2))\n\nrecord(scene, \"example_protrusion_changes.mp4\", 0:1/60:6, framerate = 60) do t\n\n    axes[1, 1].titlesize = a_title(t)\n    axes[1, 1].xlabelsize = a_xlabel(t)\n    axes[1, 1].ylabelsize = a_ylabel(t)\n\nend\n\nnothing # hide","category":"page"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"(Image: protrusion changes)","category":"page"},{"location":"laxis.html#Hiding-axis-decorations-1","page":"LAxis","title":"Hiding axis decorations","text":"","category":"section"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"Hiding axis decorations frees up the space for them in the layout if there are no other protrusions sticking into the same column or row gap that prevent enlarging the axis area. This makes it easy to achieve tight layouts that don't waste space. In this example, we set the column and row gaps to zero, so we can see the shrinking white space better.","category":"page"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing Makie\n\nscene = Scene(resolution = (600, 600), camera=campixel!)\n\nlayout = GridLayout(\n    scene, 2, 2, # we need to specify rows and columns so the gap sizes don't get lost\n    addedcolgaps = Fixed(0),\n    addedrowgaps = Fixed(0),\n    alignmode = Outside(30))\n\naxes = [LAxis(scene) for j in 1:2, i in 1:2]\nlayout[1:2, 1:2] = axes\n\nrecord(scene, \"example_hiding_decorations.mp4\", framerate=3) do io\n\n    recordframe!(io)\n    for ax in axes\n        ax.titlevisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xlabelvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.ylabelvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xticklabelsvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.yticklabelsvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xticksvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.yticksvisible = false\n        recordframe!(io)\n    end\n    for ax in axes\n        ax.xspinevisible = false\n        ax.yspinevisible = false\n        ax.xoppositespinevisible = false\n        ax.yoppositespinevisible = false\n        recordframe!(io)\n    end\nend\n\nnothing # hide","category":"page"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"(Image: hiding decorations)","category":"page"},{"location":"laxis.html#Axis-aspect-ratios-1","page":"LAxis","title":"Axis aspect ratios","text":"","category":"section"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"If you're plotting images, you might want to force a specific aspect ratio of an axis, so that the images are not stretched. The default is that an axis uses all of the available space in the layout. You can use AxisAspect and DataAspect to control the aspect ratio. For example, AxisAspect(1) forces a square axis and AxisAspect(2) results in a rectangle with a width of two times the height. DataAspect uses the currently chosen axis limits and brings the axes into the same aspect ratio. This is the easiest to use with images. A different aspect ratio can only reduce the axis space that is being used, also it necessarily has to break the layout a little bit.","category":"page"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"using MakieLayout\nusing Makie\nusing FileIO\nusing Random # hide\nRandom.seed!(1) # hide\n\nscene, layout = layoutscene(30, resolution = (1200, 900))\n\naxes = [LAxis(scene) for i in 1:2, j in 1:3]\ntightlimits!.(axes)\nlayout[1:2, 1:3] = axes\n\nimg = rotr90(load(\"cow.png\"))\n\nfor ax in axes\n    image!(ax, img)\nend\n\naxes[1, 1].title = \"Default\"\n\naxes[1, 2].title = \"DataAspect\"\naxes[1, 2].aspect = DataAspect()\n\naxes[1, 3].title = \"AxisAspect(418/348)\"\naxes[1, 3].aspect = AxisAspect(418/348)\n\naxes[2, 1].title = \"AxisAspect(1)\"\naxes[2, 1].aspect = AxisAspect(1)\n\naxes[2, 2].title = \"AxisAspect(2)\"\naxes[2, 2].aspect = AxisAspect(2)\n\naxes[2, 3].title = \"AxisAspect(0.5)\"\naxes[2, 3].aspect = AxisAspect(0.5)\n\nsave(\"example_axis_aspects.png\", scene) # hide\nnothing # hide","category":"page"},{"location":"laxis.html#","page":"LAxis","title":"LAxis","text":"(Image: axis aspects)","category":"page"}]
}
